diff -ur linux-4.19.44-gentoo/arch/x86/include/asm/efi.h linux-4.19.44-gentoo.fixed/arch/x86/include/asm/efi.h
--- linux-4.19.44-gentoo/arch/x86/include/asm/efi.h	2019-05-26 20:59:50.947485772 -0400
+++ linux-4.19.44-gentoo.fixed/arch/x86/include/asm/efi.h	2019-05-28 17:14:39.278180638 -0400
@@ -82,7 +82,8 @@
 #define arch_efi_call_virt_setup()					\
 ({									\
 	efi_sync_low_kernel_mappings();					\
-	kernel_fpu_begin();						\
+	preempt_disable();						\
+	__kernel_fpu_begin();						\
 	firmware_restrict_branch_speculation_start();			\
 									\
 	if (!efi_enabled(EFI_OLD_MEMMAP))				\
@@ -98,7 +99,8 @@
 		efi_switch_mm(efi_scratch.prev_mm);			\
 									\
 	firmware_restrict_branch_speculation_end();			\
-	kernel_fpu_end();						\
+	__kernel_fpu_end();						\
+	preempt_enable();						\
 })
 
 extern void __iomem *__init efi_ioremap(unsigned long addr, unsigned long size,
diff -ur linux-4.19.44-gentoo/arch/x86/include/asm/fpu/api.h linux-4.19.44-gentoo.fixed/arch/x86/include/asm/fpu/api.h
--- linux-4.19.44-gentoo/arch/x86/include/asm/fpu/api.h	2019-05-26 20:59:50.948485771 -0400
+++ linux-4.19.44-gentoo.fixed/arch/x86/include/asm/fpu/api.h	2019-05-28 17:14:39.302181065 -0400
@@ -12,12 +12,17 @@
 #define _ASM_X86_FPU_API_H
 
 /*
- * Use kernel_fpu_begin/end() if you intend to use FPU in kernel context. It
- * disables preemption so be careful if you intend to use it for long periods
- * of time.
- * If you intend to use the FPU in softirq you need to check first with
- * irq_fpu_usable() if it is possible.
+ * Careful: __kernel_fpu_begin/end() must be called with preempt disabled
+ * and they don't touch the preempt state on their own.
+ * If you enable preemption after __kernel_fpu_begin(), preempt notifier
+ * should call the __kernel_fpu_end() to prevent the kernel/user FPU
+ * state from getting corrupted. KVM for example uses this model.
+ *
+ * All other cases use kernel_fpu_begin/end() which disable preemption
+ * during kernel FPU usage.
  */
+extern void __kernel_fpu_begin(void);
+extern void __kernel_fpu_end(void);
 extern void kernel_fpu_begin(void);
 extern void kernel_fpu_end(void);
 extern bool irq_fpu_usable(void);
diff -ur linux-4.19.44-gentoo/arch/x86/kernel/fpu/core.c linux-4.19.44-gentoo.fixed/arch/x86/kernel/fpu/core.c
--- linux-4.19.44-gentoo/arch/x86/kernel/fpu/core.c	2019-05-26 20:59:50.948485771 -0400
+++ linux-4.19.44-gentoo.fixed/arch/x86/kernel/fpu/core.c	2019-05-28 17:14:39.302181065 -0400
@@ -93,7 +93,7 @@
 }
 EXPORT_SYMBOL(irq_fpu_usable);
 
-static void __kernel_fpu_begin(void)
+void __kernel_fpu_begin(void)
 {
 	struct fpu *fpu = &current->thread.fpu;
 
@@ -111,8 +111,9 @@
 		__cpu_invalidate_fpregs_state();
 	}
 }
+EXPORT_SYMBOL(__kernel_fpu_begin);
 
-static void __kernel_fpu_end(void)
+void __kernel_fpu_end(void)
 {
 	struct fpu *fpu = &current->thread.fpu;
 
@@ -121,6 +122,7 @@
 
 	kernel_fpu_enable();
 }
+EXPORT_SYMBOL(__kernel_fpu_end);
 
 void kernel_fpu_begin(void)
 {
